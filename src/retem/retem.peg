% peg_gen:file("retem.peg"). c(retem). l(retem).
% retem:parse("{for a in aa}{if true}{xxx}{endif}{endfor}").

syntax <- block+;
block <- if_block / for_block / expression_block;

keywords <- conditional / 'endif' / 'for' / 'endfor';

if_block <- '{' ws? conditional ws? expression ws? '}' syntax '{' ws? 'endif' ws? '}' : (3, 5, 8);
conditional <- 'if' / 'unless';
%else <- 'else' / 'elseif' / 'elsif';

for_block <- '{' ws? 'for' ws? id ws? 'in' ws? id ws? '}' syntax '{' ws? 'endfor' ws? '}' : (for, 5, 9, 12);
expression_block <- '{' ws? !keywords expression ws? '}' : 4;

simple <- dot_expression / single_operator / atom / id / number / nested;
expression <- two_operator / simple;

dot_expression <- id '.' id : (dot, 1, 3);
single_operator <- 'not' ws expression : (nt, 3);
two_operator <- simple ws? operator ws? id : (3, 1, 5);

operator <- comparator / math / logical;
comparator <- 'eq' / 'neq' / 'gt' / 'lt' / 'gteq' / 'lteq';
math <- '+' / '-' / '*' / '/';
logical <- 'and' / 'or';

nested <- 'nest' id '/' id : (nest, 2, 4);

non_zero_digit <- [1-9];
digit <- [0-9];
float <- '-'? digit* '.' digit+; 
integer <- '-'? non_zero_digit+ digit*;
number <- float / integer;

letter <- [a-zA-Z_];

atom <- 'true' / 'false' / 'null';
id <- id:(letter (letter / digit)*) ws? : 1;

ws <- [ \t\n\s\r]+;
text <- text:((!'{' .)*) ws? : 1;
